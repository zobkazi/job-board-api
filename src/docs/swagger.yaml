openapi: 3.0.0
info:
  title: Job Board API System Design
  version: 1.0.0
  description: |
    Hereâ€™s the final outline for building the job board API system based on the requirements and modular architecture you've provided. This plan is designed to align with best practices used by large companies, focusing on scalability, security, and maintainability.
  termsOfService: https://example.com/terms
  contact:
    name: Zobaidul Kazi
    email: zobaidul.kazi@me.com
    url: https://zobkazi.github.io
  license:
    name: Apache License, Version 2.0
    url: https://apache.com/licenses
servers:
  - description: Development
    url: https://localhost:8000/api/v1
  - description: Production
    url: https://localhost:8000/api/v1
  - description: Staging
    url: https://localhost:8000/api/v1

tags:
  - name: HealthChecks
    description: Public API endpoints and health purposes
  - name: Authentications
    description: Public API endpoints and authentication purposes
  - name: Users
    description: Public API endpoints and user purposes
  - name: Admin
    description: Public API endpoints and admin purposes
  - name: Jobs
    description: Public API endpoints and job purposes
  - name: Company
    description: Public API endpoints and company purposes

paths:
  /health:
    get:
      description: Testing for server health
      tags:
        - HealthChecks
      responses:
        '200':
          description: It will return a success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ok

  /api/v1/auth/register:
    post:
      description: For creating an account for authentication
      tags:
        - Authentications
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: 61b5d5b5b5b5b5b5b5b5b5b5
                username:
                  type: string
                  example: zobaidul.kazi
                name:
                  type: string
                  example: Mahamodul Hasan Moon
                email:
                  type: string
                  format: email
                  example: mahamodulhasan.moon@gmail.com
                password:
                  type: string
                  format: password
                  example: password123
                role:
                  type: string
                  example: seeker
                  enum:
                    - seeker
                    - employer
                    - admin
                  description: Role of the user
                profile:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: Md Zobaidul
                      description: First name of the user
                      minLength: 3
                      maxLength: 30
                    lastName:
                      type: string
                      example: Kazi
                      description: Last name of the user
                      minLength: 3
                      maxLength: 30
                    address:
                      type: string
                      example: Dhaka
                      description: Address of the user
                      minLength: 3
                      maxLength: 30
                    phoneNumber:
                      type: string
                      example: 01700000000
                      description: Phone number of the user
                      minLength: 11
                      maxLength: 11
                      nullable: true
                    country:
                      type: string
                      example: Bangladesh
                      description: Country of the user
                      minLength: 3
                      maxLength: 30
                      nullable: true
                      default: Bangladesh
                profilePic:
                  type: string
                  example: https://i.ibb.co/0mLp9pK/1.png
                  description: Profile picture URL
                  nullable: true
              required:
                - name
                - email
                - password
                - role
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/auth/login:
    post:
      description: For logging in any user
      tags:
        - Authentications
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: mahamodulhasan.moon@gmail.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - email
                - password
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Logged in successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/login
        '400':
          $ref: '#/components/responses/400'

  /api/v1/auth/logout:
    post:
      description: For logging out any user
      tags:
        - Authentications
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/users:
    get:
      description: For getting all users
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/users/dashboard:
    get:
      description: For getting all users
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
          
  /api/v1/users/{userId}:
    get:
      description: For getting a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/users/profile:
    get:
      description: For getting a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/users/profile/update:
    put:
      description: For updating a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/admin/users/{userId}:
    delete:
      description: For deleting a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
  
  /api/v1/admin/users/{userId}/restore:
    put:
      description: For restoring a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/admin/users/{userId}/suspend:
    put:
      description: For suspending a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
  
  /api/v1/admin/users/{userId}/unsuspend:
    put:
      description: For unsuspending a single user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'

  /api/v1/jobs:
    get:
      description: For getting all jobs
      tags:
        - Jobs
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'




components:
  responses:
    '200':
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 200
              message:
                type: string
                example: Success

    '201':
      description: Successfully created account
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 201
              message:
                type: string
                example: User created successfully
              data:
                type: object
                properties:
                  access_token:
                    type: string
                    example: iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              links:
                type: object
                properties:
                  self:
                    type: string
                    example: /auth/signup
                  signin:
                    type: string
                    example: /auth/login

    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email address

    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized

    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not found

    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal server error
