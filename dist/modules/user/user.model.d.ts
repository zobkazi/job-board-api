import { Schema, InferSchemaType } from "mongoose";
declare const profileSchema: Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
    skills: string[];
    education: string[];
    certifications: string[];
    languages: string[];
    awards: string[];
    projects: string[];
    firstname?: string | null | undefined;
    lastname?: string | null | undefined;
    address?: string | null | undefined;
    phonenumber?: string | null | undefined;
    country?: string | null | undefined;
    city?: string | null | undefined;
    state?: string | null | undefined;
    postalcode?: string | null | undefined;
    bio?: string | null | undefined;
    imageUrl?: string | null | undefined;
    gender?: string | null | undefined;
    dob?: string | null | undefined;
    experience?: string | null | undefined;
    availability?: string | null | undefined;
    availabilityTime?: string | null | undefined;
    website?: string | null | undefined;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
    skills: string[];
    education: string[];
    certifications: string[];
    languages: string[];
    awards: string[];
    projects: string[];
    firstname?: string | null | undefined;
    lastname?: string | null | undefined;
    address?: string | null | undefined;
    phonenumber?: string | null | undefined;
    country?: string | null | undefined;
    city?: string | null | undefined;
    state?: string | null | undefined;
    postalcode?: string | null | undefined;
    bio?: string | null | undefined;
    imageUrl?: string | null | undefined;
    gender?: string | null | undefined;
    dob?: string | null | undefined;
    experience?: string | null | undefined;
    availability?: string | null | undefined;
    availabilityTime?: string | null | undefined;
    website?: string | null | undefined;
}>> & import("mongoose").FlatRecord<{
    skills: string[];
    education: string[];
    certifications: string[];
    languages: string[];
    awards: string[];
    projects: string[];
    firstname?: string | null | undefined;
    lastname?: string | null | undefined;
    address?: string | null | undefined;
    phonenumber?: string | null | undefined;
    country?: string | null | undefined;
    city?: string | null | undefined;
    state?: string | null | undefined;
    postalcode?: string | null | undefined;
    bio?: string | null | undefined;
    imageUrl?: string | null | undefined;
    gender?: string | null | undefined;
    dob?: string | null | undefined;
    experience?: string | null | undefined;
    availability?: string | null | undefined;
    availabilityTime?: string | null | undefined;
    website?: string | null | undefined;
}> & {
    _id: import("mongoose").Types.ObjectId;
}>;
declare const userSchema: Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}>> & import("mongoose").FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}> & {
    _id: import("mongoose").Types.ObjectId;
}>;
declare const User: import("mongoose").Model<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}, {}, {}, {}, import("mongoose").Document<unknown, {}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}> & {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
} & {
    _id: import("mongoose").Types.ObjectId;
}, Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}>> & import("mongoose").FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    username: string;
    email: string;
    password: string;
    role: "seeker" | "employer" | "admin";
    verified: boolean;
    name?: string | null | undefined;
    profile?: {
        skills: string[];
        education: string[];
        certifications: string[];
        languages: string[];
        awards: string[];
        projects: string[];
        firstname?: string | null | undefined;
        lastname?: string | null | undefined;
        address?: string | null | undefined;
        phonenumber?: string | null | undefined;
        country?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        postalcode?: string | null | undefined;
        bio?: string | null | undefined;
        imageUrl?: string | null | undefined;
        gender?: string | null | undefined;
        dob?: string | null | undefined;
        experience?: string | null | undefined;
        availability?: string | null | undefined;
        availabilityTime?: string | null | undefined;
        website?: string | null | undefined;
    } | null | undefined;
    resetCode?: string | null | undefined;
    resetCodeExpiry?: Date | null | undefined;
}> & {
    _id: import("mongoose").Types.ObjectId;
}>>;
export type TUser = InferSchemaType<typeof userSchema>;
export type TProfile = InferSchemaType<typeof profileSchema>;
export default User;
